package com.example.g29.msbandapp;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.database.Cursor;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.NonNull;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.NumberPicker;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.microsoft.band.BandClient;
import com.microsoft.band.BandClientManager;
import com.microsoft.band.BandException;
import com.microsoft.band.BandInfo;
import com.microsoft.band.ConnectionState;
import com.microsoft.band.sensors.HeartRateConsentListener;
import com.microsoft.band.sensors.BandHeartRateEvent;
import com.microsoft.band.sensors.BandHeartRateEvent;
import com.microsoft.band.UserConsent;
import android.os.AsyncTask;

import java.lang.ref.WeakReference;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.time.Period;

import com.google.gson.Gson;


public class HomeActivity extends Activity {
    private TextView WelcomeMsg, ErrorTxt, DataTxt, ActivityTxt, HealthWarningTxt;
    private Button LogoutBtn, StartBtn, StopBtn, ReportBtn, GraphBtn, TestHRBtn; //MobileDataSaveBtn,
    private BandClient client = null;
    //private boolean useMobileData = false;
    private Timer execute_timer, sync_timer;
    private NumberPicker SecPicker, HourPicker, MinPicker;
    private Integer secondValue = 0, minValue = 0, hourValue = 0;
    private String userName, userDobString;
    private int userId, weight, age;
    private float height;
    private Integer ActivityLevelRating, HealthRating;
    DatabaseHelper myDb;
    private int lastHeartRate;
    private int callCounter = 0;

    private ActivityClassifier activityClassifier;
    List<Float> predictionData = new ArrayList<>();
    ArrayList<Float> xa = new ArrayList<>();
    ArrayList<Float> ya = new ArrayList<>();
    ArrayList<Float> za = new ArrayList<>();
    ArrayList<Float> xg = new ArrayList<>();
    ArrayList<Float> yg = new ArrayList<>();
    ArrayList<Float> zg = new ArrayList<>();
    int N_SAMPLES = 5;  //can only make a prediction when we have collected five samples (every five seconds of data collection
    int COUNT = 0;
    int hrCount = 1;
    //first 50 data points should correspond to standing still, second 50 = lying down, third 50 = walking, fourth 50 = jogging, last 50 = climbing stairs
    double[] xa_array = {-2.8439,
            -2.9935,
            -2.8846,
            -2.9245,
            -2.8963,
            -2.8245,
            -2.8508,
            -2.7288,
            -2.8431,
            -2.9236,
            -2.8515,
            -2.9691,
            -2.775,
            -2.8326,
            -2.9308,
            -2.7152,
            -3.066,
            -2.8348,
            -2.8279,
            -2.8806,
            -2.6157,
            -2.7135,
            -2.9148,
            -2.8777,
            -2.9516,
            -2.8892,
            -2.9444,
            -2.9381,
            -2.6935,
            -2.8519,
            -2.8168,
            -2.744,
            -2.7751,
            -2.7894,
            -2.98,
            -3.0814,
            -2.9858,
            -2.9411,
            -2.6919,
            -2.7965,
            -2.7281,
            -2.8148,
            -2.716,
            -2.7891,
            -2.7658,
            -2.7709,
            -2.7725,
            -2.7156,
            -2.8895,
            -2.9503,
            -7.1947,
            -7.0592,
            -7.2204,
            -7.1842,
            -7.2358,
                    -7.088,
                    -7.1798,
                    -7.2921,
                    -7.2456,
                    -7.2134,
                    -7.1449,
                    -7.11,
                    -7.2481,
                    -7.2663,
                    -7.1524,
                    -7.055,
                    -7.0986,
                    -7.1589,
                    -7.3009,
                    -7.2442,
                    -7.0479,
                    -7.0789,
                    -7.2296,
                    -7.1861,
                    -7.2579,
                    -7.1369,
                    -7.065,
                    -7.1484,
                    -7.2524,
                    -7.1764,
                    -7.1709,
                    -7.2598,
                    -7.2839,
                    -6.9364,
                    -7.2207,
                    -7.1339,
                    -7.1809,
                    -7.1645,
                    -7.3286,
                    -7.1898,
                    -7.2077,
                    -7.1656,
                    -7.0852,
                    -7.241,
                    -7.2483,
                    -7.2816,
                    -7.1384,
                    -7.2209,
                    -7.2831,
                    -7.2571,
                    -7.0015,
                    -6.3209,
                    -4.5576,
                    -3.2267,
                    -2.6922,
                    -2.5455,
                    -2.6477,
                    -3.5317,
                    -3.5314,
                    -2.9414,
                    -2.6856,
                    -2.2705,
                    -2.1678,
                    -2.5895,
                    -2.7489,
                    -3.1027,
                    -3.5368,
                    -3.6962,
                    -4.3805,
                    -4.1228,
                    -3.8457,
                    -5.1117,
                    -7.0621,
                    -7.5776,
                    -4.7413,
                    -2.6209,
                    -1.5504,
                    -2.1059,
                    -2.4227,
                    -3.3687,
                    -3.598,
                    -3.2876,
                    -3.0878,
                    -2.9177,
                    -2.7653,
                    -2.851,
                    -2.3628,
                    -2.4316,
                    -2.412,
                    -2.3007,
                    -2.3808,
                    -2.6918,
                    -3.1068,
                    -3.4346,
                    -3.7653,
                    -3.8716,
                    -3.5811,
                    -3.7325,
                    -4.0712,
                    -5.1157,
                    -17.72,
                    -13.696,
                    -8.5926,
                    -4.2178,
                    -0.86095,
            2.248,
            4.4794,
            5.0643,
            4.5977,
            3.6117,
            2.0799,
            0.89671,
                    -1.883,
                    -7.5845,
                    -19.385,
                    -21.196,
                    -21.179,
                    -21.143,
                    -20.716,
                    -18.629,
                    -11.798,
                    -6.8242,
                    -5.3137,
                    -4.3104,
                    -2.9126,
                    -0.5972,
            0.80255,
            1.1799,
            0.1654,
                    -1.8143,
                    -3.7777,
                    -6.8084,
                    -10.144,
                    -12.997,
                    -15.499,
                    -18.637,
                    -21.2,
                    -21.23,
                    -21.281,
                    -18.704,
                    -14.412,
                    -11.67,
                    -9.0803,
                    -6.3782,
                    -2.4938,
            1.2916,
            4.0398,
            5.2049,
            5.0974,
            2.831,
                    -2.9894,
                    -2.9168,
                    -2.725,
                    -2.7786,
                    -3.4406,
                    -4.0487,
                    -4.4572,
                    -5.0294,
                    -5.0788,
                    -4.7499,
                    -4.9486,
                    -4.4439,
                    -3.4012,
                    -3.0603,
                    -3.1615,
                    -3.1131,
                    -3.1997,
                    -2.8639,
                    -2.7609,
                    -2.9982,
                    -3.1004,
                    -2.9637,
                    -3.0024,
                    -2.8284,
                    -2.9867,
                    -2.8626,
                    -2.7787,
                    -2.9943,
                    -3.091,
                    -3.4641,
                    -3.4168,
                    -3.5797,
                    -3.7725,
                    -3.768,
                    -3.8666,
                    -4.0909,
                    -4.1713,
                    -4.2545,
                    -4.3433,
                    -4.3616,
                    -4.4893,
                    -4.545,
                    -4.5707,
                    -4.7087,
                    -4.9349,
                    -5.0254,
                    -4.6222,
                    -4.5854,
                    -5.2442,
                    -5.3071
    };
    double[] ya_array = {-9.0618,
            -9.2048,
            -9.1945,
            -9.1746,
            -9.2039,
            -9.1214,
            -9.1725,
            -9.2629,
            -9.1319,
            -9.1948,
            -9.1125,
            -9.2893,
            -9.4535,
            -9.3413,
            -9.332,
            -9.274,
            -9.1542,
            -8.9851,
            -9.1535,
            -9.2124,
            -9.2639,
            -9.1517,
            -9.1745,
            -9.1104,
            -9.1822,
            -9.173,
            -9.0716,
            -9.1036,
            -9.1217,
            -9.2951,
            -9.1339,
            -9.2213,
            -9.2309,
            -9.1032,
            -9.0731,
            -9.1723,
            -9.1409,
            -8.9531,
            -9.1522,
            -9.1606,
            -9.3528,
            -9.0416,
            -9.1242,
            -9.2328,
            -9.3336,
            -9.0229,
            -9.1852,
            -9.0513,
            -9.2526,
            -9.3222,
            1.4434,
            1.5346,
            1.5549,
            1.5861,
            1.5335,
            1.7037,
            1.6445,
            1.5456,
            1.5733,
            1.546,
            1.5432,
            1.5448,
            1.5741,
            1.6034,
            1.5423,
            1.6861,
            1.4846,
            1.6142,
            1.7046,
            1.5629,
            1.4212,
            1.694,
            1.4849,
            1.6133,
            1.6338,
            1.6335,
            1.5532,
            1.4347,
            1.5158,
            1.424,
            1.6249,
            1.6644,
            1.7256,
            1.5038,
            1.555,
            1.5328,
            1.5152,
            1.563,
            1.5045,
            1.6445,
            1.6238,
            1.653,
            1.5134,
            1.5252,
            1.6439,
            1.3859,
            1.4347,
            1.5751,
            1.4927,
            1.514,
            -10.089,
                    -10.026,
                    -10.184,
                    -9.5227,
                    -8.1222,
                    -6.6726,
                    -6.2898,
                    -6.129,
                    -5.963,
                    -6.0992,
                    -6.5197,
                    -6.9666,
                    -7.6884,
                    -8.5517,
                    -9.1731,
                    -9.6835,
                    -10.008,
                    -11.201,
                    -12.269,
                    -10.926,
                    -10.646,
                    -13.388,
                    -17.205,
                    -13.466,
                    -8.0162,
                    -5.8203,
                    -8.8537,
                    -9.7057,
                    -9.7632,
                    -9.8675,
                    -8.8678,
                    -7.2201,
                    -6.2267,
                    -6.1237,
                    -6.1942,
                    -6.4349,
                    -6.1951,
                    -6.1656,
                    -6.5076,
                    -6.8669,
                    -7.6442,
                    -8.2951,
                    -9.2469,
                    -9.8955,
                    -10.543,
                    -11.654,
                    -11.727,
                    -10.707,
                    -10.089,
                    -13.061,
            9.5017,
            8.321,
            7.3165,
            7.3348,
            5.4355,
            4.7116,
            4.6746,
            4.3574,
            4.0273,
            4.2818,
            4.8738,
            5.7752,
            7.4927,
            10.011,
            13.191,
            13.331,
            10.764,
            5.6456,
            3.6896,
            1.9666,
            0.73037,
                    -2.3508,
                    -1.9323,
                    -2.6311,
                    -4.3912,
                    -4.0209,
                    -4.7052,
                    -4.4451,
                    -3.839,
                    -3.1614,
                    -3.7848,
                    -3.3195,
                    -3.6198,
                    -3.0608,
                    -0.9905,
            0.89586,
            2.1793,
                    -0.16946,
            3.7711,
            4.0014,
            5.3294,
            6.4085,
            6.6579,
            5.6871,
            5.3867,
            4.644,
            3.6346,
            2.8588,
            3.4062,
            3.8003,
                    -8.7211,
                    -9.0808,
                    -9.2907,
                    -9.5819,
                    -10.109,
                    -10.167,
                    -10.675,
                    -10.565,
                    -10.838,
                    -10.934,
                    -11.858,
                    -11.999,
                    -10.438,
                    -9.3487,
                    -9.458,
                    -9.6202,
                    -9.6446,
                    -9.3077,
                    -9.1093,
                    -9.4192,
                    -9.1195,
                    -8.8592,
                    -8.5706,
                    -8.4789,
                    -7.9812,
                    -7.8197,
                    -7.2297,
                    -7.0417,
                    -7.1392,
                    -7.497,
                    -7.7519,
                    -8.0732,
                    -8.1221,
                    -8.4924,
                    -8.4231,
                    -8.4515,
                    -8.3119,
                    -8.6331,
                    -8.5138,
                    -8.9928,
                    -9.3026,
                    -9.5133,
                    -9.9931,
                    -10.602,
                    -11.367,
                    -11.294,
                    -11.225,
                    -11.756,
                    -12.082,
                    -11.662
    };
    double[] za_array = {1.8177,
            1.5189,
            1.5507,
            1.5413,
            1.6127,
            1.8564,
            1.7497,
            1.7139,
            1.8142,
            1.5194,
            1.7527,
            2.0668,
            1.6523,
            1.8663,
            1.8042,
            1.5988,
            1.584,
            1.4882,
            1.6465,
            1.7581,
            1.6097,
            1.8341,
            1.5517,
            1.9611,
            1.7805,
            1.6976,
            1.8381,
            1.6386,
            1.8252,
            1.4936,
            1.6058,
            1.8723,
            1.9135,
            1.6803,
            1.6922,
            1.7706,
            1.9075,
            1.6878,
            1.782,
            1.9378,
            1.7199,
            1.8396,
            1.575,
            1.7154,
            1.6375,
            1.7051,
            1.4782,
            1.8704,
            1.7353,
            1.7839,
            6.343,
            6.4621,
            6.4944,
            6.6106,
            6.3475,
            6.3664,
            6.4468,
            6.5564,
            6.3287,
            6.5981,
            6.3167,
            6.4835,
            6.412,
            6.3406,
            6.2334,
            6.6051,
            6.4596,
            6.4245,
            6.4602,
            6.2865,
            6.1231,
            6.3972,
            6.4909,
            6.3307,
            6.3838,
            6.3525,
            6.3172,
            6.4676,
            6.5758,
            6.4045,
            6.4875,
            6.4374,
            6.555,
            6.3773,
            6.5048,
            6.285,
            6.5237,
            6.2969,
            6.4502,
            6.4468,
            6.3833,
            6.3014,
            6.3361,
            6.5242,
            6.3947,
            6.5901,
            6.4676,
            6.5058,
            6.2726,
            6.3986,
            3.0789,
            2.3737,
            1.6471,
            1.7322,
            1.7814,
            1.7393,
            2.0188,
            2.0998,
            1.7019,
            1.0805,
            1.0282,
            1.3392,
            1.1572,
            0.83283,
            0.68718,
            0.65124,
            1.2288,
            1.94,
            2.1053,
            2.4016,
            2.4052,
            2.1848,
            2.4731,
            2.41,
            1.3804,
            0.9694,
            0.63023,
            0.43138,
            0.67851,
            0.24621,
            0.22328,
            -0.0068368,
            0.3345,
            0.63132,
            0.5757,
            0.51159,
            0.49233,
            0.44172,
            0.23712,
            0.31291,
            0.57612,
            0.4915,
            0.30849,
            0.45314,
            0.6916,
            0.6048,
            1.2782,
            1.3188,
            1.0685,
            0.87819,
                    -1.827,
            1.1036,
            0.64707,
            0.48132,
            0.55303,
            1.1627,
            0.4629,
            0.7387,
            1.7326,
            2.1828,
            2.3791,
            0.51793,
                    -1.7295,
                    -3.8536,
                    -6.8821,
                    -8.9168,
                    -8.6181,
                    -6.4365,
                    -4.0447,
                    -3.3392,
                    -4.9635,
                    -4.0759,
                    -1.232,
                    -0.11072,
            0.88461,
                    -0.08646,
                    -0.51651,
                    -0.51392,
            0.099717,
                    -0.13724,
                    -0.48091,
                    -0.94722,
                    -1.9831,
                    -3.0801,
                    -5.0495,
                    -5.4135,
                    -4.0681,
                    -3.946,
                    -1.8948,
                    -0.86243,
                    -1.0564,
                    -1.1483,
                    -1.2088,
                    -1.2886,
                    -1.3348,
                    -0.60113,
            0.46298,
            1.8825,
            1.6182,
            1.0338,
            1.8869,
            1.921,
            1.9313,
            1.8126,
            2.057,
            2.3458,
            2.4662,
            2.503,
            2.2394,
            1.6408,
            1.2405,
            1.1292,
            1.1864,
            1.1263,
            1.2042,
            0.97732,
            0.5386,
            0.23253,
            0.065366,
            0.081124,
            0.054444,
            0.077872,
                    -0.063949,
            0.1073,
                    -0.11781,
            0.02568,
            0.034351,
                    -0.175,
            0.08054,
            0.30223,
                    -0.18968,
                    -0.32033,
                    -0.20819,
                    -0.23712,
                    -0.30657,
                    -0.15174,
                    -0.18643,
                    -0.30665,
                    -0.38403,
                    -0.28297,
                    -0.2568,
                    -0.32983,
                    -0.31216,
                    -0.17592,
            0.28581,
            0.61239,
            0.48041,
            0.43305,
            0.83342,
            1.7919
    };
    double[] xg_array = {-0.058824,
            -0.058824,
            -0.058824,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.068627,
            -0.068627,
            -0.068627,
            -0.045098,
            -0.045098,
            -0.045098,
            -0.045098,
            -0.060784,
            -0.060784,
            -0.060784,
            -0.076471,
            -0.076471,
            -0.076471,
            -0.076471,
            -0.064706,
            -0.064706,
            -0.064706,
            -0.064706,
            -0.064706,
            -0.064706,
            -0.064706,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.078431,
            -0.066667,
            -0.066667,
            -0.066667,
            -0.056863,
            -0.056863,
            -0.17451,
                    -0.17451,
                    -0.19412,
                    -0.19412,
                    -0.19412,
                    -0.19412,
                    -0.18824,
                    -0.18824,
                    -0.18824,
                    -0.19804,
                    -0.19804,
                    -0.19804,
                    -0.19804,
                    -0.18627,
                    -0.18627,
                    -0.18627,
                    -0.19608,
                    -0.19608,
                    -0.19608,
                    -0.19608,
                    -0.18431,
                    -0.18431,
                    -0.18431,
                    -0.2,
                    -0.2,
                    -0.2,
                    -0.2,
                    -0.20196,
                    -0.20196,
                    -0.20196,
                    -0.19804,
                    -0.19804,
                    -0.19804,
                    -0.19804,
                    -0.20588,
                    -0.20588,
                    -0.20588,
                    -0.19216,
                    -0.19216,
                    -0.19216,
                    -0.19216,
                    -0.20392,
                    -0.20392,
                    -0.20392,
                    -0.18431,
                    -0.18431,
                    -0.18431,
                    -0.18431,
                    -0.17647,
                    -0.17647,
            -0.57647,
                    -0.57647,
                    -0.56667,
                    -0.56667,
                    -0.56667,
                    -0.56667,
                    -0.56275,
                    -0.56275,
                    -0.56275,
                    -0.55294,
                    -0.55294,
                    -0.55294,
                    -0.55294,
                    -0.55294,
                    -0.55294,
                    -0.55294,
                    -0.5549,
                    -0.5549,
                    -0.5549,
                    -0.56667,
                    -0.56667,
                    -0.56667,
                    -0.56667,
                    -0.61373,
                    -0.61373,
                    -0.61373,
                    -0.60196,
                    -0.60196,
                    -0.60196,
                    -0.60196,
                    -0.60784,
                    -0.60784,
                    -0.60784,
                    -0.59608,
                    -0.59608,
                    -0.59608,
                    -0.59608,
                    -0.58627,
                    -0.58627,
                    -0.58627,
                    -0.59216,
                    -0.59216,
                    -0.59216,
                    -0.59216,
                    -0.59804,
                    -0.59804,
                    -0.59804,
                    -0.59216
                    -0.59216,
                    -0.59216,
                    -0.88824,
                    -0.88824,
                    -0.86863,
                    -0.86863,
                    -0.86863,
                    -0.79608,
                    -0.79608,
                    -0.79608,
                    -0.79608,
                    -0.77843,
                    -0.77843,
                    -0.77843,
                    -0.75882,
                    -0.75882,
                    -0.75882,
                    -0.75882,
                    -0.75686,
                    -0.75686,
                    -0.75686,
                    -0.70196,
                    -0.70196,
                    -0.70196,
                    -0.70196,
                    -0.68039,
                    -0.68039,
                    -0.68039,
                    -0.76667,
                    -0.76667,
                    -0.76667,
                    -0.76667,
                    -0.83333,
                    -0.83333,
                    -0.83333,
                    -0.85686,
                    -0.85686,
                    -0.85686,
                    -0.85686,
                    -0.86078,
                    -0.86078,
                    -0.86078,
                    -0.82941,
                    -0.82941,
                    -0.82941,
                    -0.82941,
                    -0.81569,
                    -0.81569,
                    -0.81569,
                    -0.75686,
                    -0.75686,
                    -0.75686,
                    -0.40196,
                    -0.40196,
                    -0.39216,
                    -0.39216,
                    -0.39216,
                    -0.39216,
                    -0.3902,
                    -0.3902,
                    -0.3902,
                    -0.35882,
                    -0.35882,
                    -0.35882,
                    -0.35882,
                    -0.33529,
                    -0.33529,
                    -0.33529,
                    -0.32353,
                    -0.32353,
                    -0.32353,
                    -0.32353,
                    -0.33529,
                    -0.33529,
                    -0.33529,
                    -0.34118,
                    -0.34118,
                    -0.34118,
                    -0.34118,
                    -0.37647,
                    -0.37647,
                    -0.37647,
                    -0.39412,
                    -0.39412,
                    -0.39412,
                    -0.39412,
                    -0.39412,
                    -0.39412,
                    -0.39412,
                    -0.39608,
                    -0.39608,
                    -0.39608,
                    -0.39608,
                    -0.39804,
                    -0.39804,
                    -0.39804,
                    -0.39216,
                    -0.39216,
                    -0.39216,
                    -0.39216,
                    -0.41176,
                    -0.41176
    };
    double[] yg_array = {-0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93224,
            -0.93224,
            -0.93224,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93429,
            -0.93224,
            -0.93224,
            -0.93224,
            -0.94045,
            -0.94045,
            -0.94045,
            -0.94045,
            -0.93634,
            -0.93634,
            -0.93634,
            -0.91992,
            -0.91992,
            -0.91992,
            -0.91992,
            -0.93224,
            -0.93224,
            -0.93224,
            -0.92197,
            -0.92197,
            -0.92197,
            -0.92197,
            -0.94045,
            -0.94045,
            -0.94045,
            -0.91581,
            -0.91581,
            -0.91581,
            -0.91581,
            -0.93224,
            -0.93224,
            -0.93224,
            -0.92608,
            -0.92608,
            0.71869,
            0.71869,
            0.73922,
            0.73922,
            0.73922,
            0.73922,
            0.72485,
            0.72485,
            0.72485,
            0.72895,
            0.72895,
            0.72895,
            0.72895,
            0.73101,
            0.73101,
            0.73101,
            0.72485,
            0.72485,
            0.72485,
            0.72485,
            0.72485,
            0.72485,
            0.72485,
            0.72279,
            0.72279,
            0.72279,
            0.72279,
            0.72279,
            0.72279,
            0.72279,
            0.72895,
            0.72895,
            0.72895,
            0.72895,
            0.73511,
            0.73511,
            0.73511,
            0.73511,
            0.73511,
            0.73511,
            0.73511,
            0.72074,
            0.72074,
            0.72074,
            0.72279,
            0.72279,
            0.72279,
            0.72279,
            0.73717,
            0.73717,
            -0.59959,
                    -0.59959,
                    -0.65298,
                    -0.65298,
                    -0.65298,
                    -0.65298,
                    -0.66324,
                    -0.66324,
                    -0.66324,
                    -0.62834,
                    -0.62834,
                    -0.62834,
                    -0.62834,
                    -0.62834,
                    -0.62834,
                    -0.62834,
                    -0.6078,
                    -0.6078,
                    -0.6078,
                    -0.61602,
                    -0.61602,
                    -0.61602,
                    -0.61602,
                    -0.6037,
                    -0.6037,
                    -0.6037,
                    -0.57084,
                    -0.57084,
                    -0.57084,
                    -0.57084,
                    -0.56468,
                    -0.56468,
                    -0.56468,
                    -0.54004,
                    -0.54004,
                    -0.54004,
                    -0.54004,
                    -0.51335,
                    -0.51335,
                    -0.51335,
                    -0.50308,
                    -0.50308,
                    -0.50308,
                    -0.50308,
                    -0.50513,
                    -0.50513,
                    -0.50513,
                    -0.54004,
                    -0.54004,
                    -0.54004,
            0.4538,
            0.4538,
            0.56879,
            0.56879,
            0.56879,
            0.67556,
            0.67556,
            0.67556,
            0.67556,
            0.6694,
            0.6694,
            0.6694,
            0.64066,
            0.64066,
            0.64066,
            0.64066,
            0.57495,
            0.57495,
            0.57495,
            0.56879,
            0.56879,
            0.56879,
            0.56879,
            0.51335,
            0.51335,
            0.51335,
            0.36756,
            0.36756,
            0.36756,
            0.36756,
            0.25051,
            0.25051,
            0.25051,
            0.22587,
            0.22587,
            0.22587,
            0.22587,
            0.29158,
            0.29158,
            0.29158,
            0.41889,
            0.41889,
            0.41889,
            0.41889,
            0.51335,
            0.51335,
            0.51335,
            0.577,
            0.577,
            0.577,
                    -0.3306,
                    -0.3306,
                    -0.31006,
                    -0.31006,
                    -0.31006,
                    -0.31006,
                    -0.30801,
                    -0.30801,
                    -0.30801,
                    -0.31417,
                    -0.31417,
                    -0.31417,
                    -0.31417,
                    -0.31828,
                    -0.31828,
                    -0.31828,
                    -0.3306,
                    -0.3306,
                    -0.3306,
                    -0.3306,
                    -0.29158,
                    -0.29158,
                    -0.29158,
                    -0.27926,
                    -0.27926,
                    -0.27926,
                    -0.27926,
                    -0.24435,
                    -0.24435,
                    -0.24435,
                    -0.22793,
                    -0.22793,
                    -0.22793,
                    -0.22793,
                    -0.20739,
                    -0.20739,
                    -0.20739,
                    -0.19713,
                    -0.19713,
                    -0.19713,
                    -0.19713,
                    -0.19097,
                    -0.19097,
                    -0.19097,
                    -0.19097,
                    -0.19097,
                    -0.19097,
                    -0.19097,
                    -0.21355,
                    -0.21355,
    };
    double[] zg_array = {-0.34483,
            -0.34483,
            -0.34483,
            -0.34052,
            -0.34052,
            -0.34052,
            -0.34052,
            -0.34052,
            -0.34052,
            -0.34052,
            -0.34698,
            -0.34698,
            -0.34698,
            -0.36853,
            -0.36853,
            -0.36853,
            -0.36853,
            -0.34267,
            -0.34267,
            -0.34267,
            -0.34267,
            -0.34267,
            -0.34267,
            -0.34267,
            -0.35129,
            -0.35129,
            -0.35129,
            -0.36853,
            -0.36853,
            -0.36853,
            -0.36853,
            -0.34914,
            -0.34914,
            -0.34914,
            -0.35345,
            -0.35345,
            -0.35345,
            -0.35345,
            -0.35991,
            -0.35991,
            -0.35991,
            -0.36207,
            -0.36207,
            -0.36207,
            -0.36207,
            -0.3556,
            -0.3556,
            -0.3556,
            -0.35129,
            -0.35129,
            0.77802,
            0.77802,
            0.7694,
            0.7694,
            0.7694,
            0.7694,
            0.78233,
            0.78233,
            0.78233,
            0.76724,
            0.76724,
            0.76724,
            0.76724,
            0.77586,
            0.77586,
            0.77586,
            0.78879,
            0.78879,
            0.78879,
            0.78879,
            0.78879,
            0.78879,
            0.78879,
            0.79095,
            0.79095,
            0.79095,
            0.79095,
            0.76724,
            0.76724,
            0.76724,
            0.76293,
            0.76293,
            0.76293,
            0.76293,
            0.78448,
            0.78448,
            0.78448,
            0.78448,
            0.78448,
            0.78448,
            0.78448,
            0.76724,
            0.76724,
            0.76724,
            0.79095,
            0.79095,
            0.79095,
            0.79095,
            0.7694,
            0.7694,
            0.75431,
            0.75431,
            0.72629,
            0.72629,
            0.72629,
            0.72629,
            0.72629,
            0.72629,
            0.72629,
            0.72845,
            0.72845,
            0.72845,
            0.72845,
            0.72845,
            0.72845,
            0.72845,
            0.75431,
            0.75431,
            0.75431,
            0.75647,
            0.75647,
            0.75647,
            0.75647,
            0.70474,
            0.70474,
            0.70474,
            0.74353,
            0.74353,
            0.74353,
            0.74353,
            0.76724,
            0.76724,
            0.76724,
            0.78448,
            0.78448,
            0.78448,
            0.78448,
            0.81034,
            0.81034,
            0.81034,
            0.82543,
            0.82543,
            0.82543,
            0.82543,
            0.80819,
            0.80819,
            0.80819,
            0.78448,
            0.78448,
            0.78448,
            0.46767,
            0.46767,
            0.32759,
            0.32759,
            0.32759,
            0.37069,
            0.37069,
            0.37069,
            0.37069,
            0.38362,
            0.38362,
            0.38362,
            0.46336,
            0.46336,
            0.46336,
            0.46336,
            0.56897,
            0.56897,
            0.56897,
            0.65086,
            0.65086,
            0.65086,
            0.65086,
            0.72629,
            0.72629,
            0.72629,
            0.73491,
            0.73491,
            0.73491,
            0.73491,
            0.69181,
            0.69181,
            0.69181,
            0.67888,
            0.67888,
            0.67888,
            0.67888,
            0.65517,
            0.65517,
            0.65517,
            0.60991,
            0.60991,
            0.60991,
            0.60991,
            0.53664,
            0.53664,
            0.53664,
            0.57974,
            0.57974,
            0.57974,
                    -0.17241,
                    -0.17241,
                    -0.21983,
                    -0.21983,
                    -0.21983,
                    -0.21983,
                    -0.22629,
                    -0.22629,
                    -0.22629,
                    -0.26078,
                    -0.26078,
                    -0.26078,
                    -0.26078,
                    -0.26078,
                    -0.26078,
                    -0.26078,
                    -0.2694,
                    -0.2694,
                    -0.2694,
                    -0.2694,
                    -0.29095,
                    -0.29095,
                    -0.29095,
                    -0.27371,
                    -0.27371,
                    -0.27371,
                    -0.27371,
                    -0.29526,
                    -0.29526,
                    -0.29526,
                    -0.30388,
                    -0.30388,
                    -0.30388,
                    -0.30388,
                    -0.27802,
                    -0.27802,
                    -0.27802,
                    -0.27371,
                    -0.27371,
                    -0.27371,
                    -0.27371,
                    -0.28233,
                    -0.28233,
                    -0.28233,
                    -0.28879,
                    -0.28879,
                    -0.28879,
                    -0.28879,
                    -0.28664,
                    -0.28664
    };


    private DataCollectionService mBoundService;
    boolean mIsBound;


    private ServiceConnection mConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            // This is called when the connection with the service has been
            // established, giving us the service object we can use to
            // interact with the service.  Because we have bound to a explicit
            // service that we know is running in our own process, we can
            // cast its IBinder to a concrete class and directly access it.
            mBoundService = ((DataCollectionService.LocalBinder) service).getService();
            startDataCollection();
            System.out.println("onServiceConnected is called");
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            // This is called when the connection with the service has been
            // unexpectedly disconnected -- that is, its process crashed.
            // Because it is running in our same process, we should never
            // see this happen.
            mBoundService = null;
        }
    };

    void doBindService(){
        // Establish a connection with the service.  We use an explicit
        // class name because we want a specific service implementation that
        // we know will be running in our own process (and thus won't be
        // supporting component replacement by other applications).
        bindService(new Intent(this, DataCollectionService.class),
                mConnection, Context.BIND_AUTO_CREATE);
        mIsBound = true;
        System.out.println("doBindService");
    }

    void doUnbindService(){
        if(mIsBound){
            //Detach our existing connection
            unbindService(mConnection);
            mIsBound = false;
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home);
        Intent intent = getIntent();
        userName = intent.getStringExtra("name");
        userId = intent.getIntExtra("userId", 0);
        userDobString = intent.getStringExtra("dob");
        height = intent.getFloatExtra("height", 0);
        weight = intent.getIntExtra("weight", 0);
        ActivityLevelRating = intent.getIntExtra("activityLevelRating", 0);
        HealthRating = intent.getIntExtra("healthRating", 0);
        activityClassifier = new ActivityClassifier(getApplicationContext());
        myDb = new DatabaseHelper(this);

        try{
            Date birthDate = new SimpleDateFormat("yyyy-MM-dd").parse(userDobString);
            Date today = new Date();
            DateFormat formatter = new SimpleDateFormat("yyyyMMdd");
            age = (Integer.parseInt(formatter.format(today)) - Integer.parseInt(formatter.format(birthDate))) / 10000;
        }catch(ParseException e){
            e.printStackTrace();
        }


        setupUIViews();
        welcomeUser();
        final WeakReference<Activity> reference = new WeakReference<Activity>(this);


        LogoutBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                //stop data collection if necessary
                if(!StartBtn.isEnabled()){
                    stopDataCollection();
                }
                //unbind Service
                doUnbindService();
                //sign user out and return to login screen
                Intent logIntent = new Intent(HomeActivity.this, LoginActivity.class);
                startActivity(logIntent);
            }
        });


        StartBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //clear Data UI and Error UI on Start
                appendToUI(1, "");
                appendToUI(3, "");
                new HeartRateConsentTask().execute(reference);
            }
        });

        StopBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                stopDataCollection();

            }
        });

        GraphBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent graphIntent = new Intent(HomeActivity.this, GraphActivity.class);
                graphIntent.putExtra("userId", userId);
                startActivity(graphIntent);
            }
        });
        TestHRBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                hrCount++;
            }
        });

        ReportBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent reportIntent = new Intent(HomeActivity.this, ReportActivity.class);
                reportIntent.putExtra("userId", userId);
                startActivity(reportIntent);
            }
        });

    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    @Override
    protected void onPause() {
        super.onPause();
        //if (client != null) {
         //   stopDataCollection();
        //}
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        /*if (client != null) {
            try {
                stopDataCollection();
                client.disconnect().await();
            } catch (InterruptedException e) {
                // Do nothing as this is happening during destroy
            } catch (BandException e) {
                // Do nothing as this is happening during destroy
            }
        }

        */
    }

    private void setupUIViews() {
        WelcomeMsg = findViewById(R.id.welcomeMsg);
        LogoutBtn = findViewById(R.id.signOutBtn);
        ErrorTxt = findViewById(R.id.errorTxt);
        DataTxt = findViewById(R.id.dataTxt);
        ActivityTxt = findViewById(R.id.activityText);
        StartBtn = findViewById(R.id.startBtn);
        StopBtn = findViewById(R.id.stopBtn);
        TestHRBtn = findViewById(R.id.testHrBtn);
        GraphBtn = findViewById(R.id.graph);
        ReportBtn = findViewById(R.id.reportBtn);
        HealthWarningTxt = findViewById(R.id.healthWarningMsg);
    }

    private void timer_toggle(int status, long time){
        //timer is not running, start timer
        if(status == 0){
            //start new timer task and timer
            TimerTask task = new TimerTask() {
                @Override
                public void run(){
                    updateData();
                }
            };

            if(execute_timer != null){
                execute_timer.cancel();
                execute_timer.purge();
            }
            execute_timer = new Timer();
            execute_timer.scheduleAtFixedRate(task, 0, time);
        }else if(status == 1){
            //start sync timer
            TimerTask syncTask = new TimerTask() {
                @Override
                public void run() {
                    syncDB();
                }
            };
            if(sync_timer != null){
                sync_timer.cancel();
                sync_timer.purge();
            }
            sync_timer = new Timer();
            sync_timer.scheduleAtFixedRate(syncTask, 0, time);

        }else{
            //stop timer and stop timer task
            execute_timer.cancel();
            execute_timer.purge();
            sync_timer.cancel();
            sync_timer.purge();
        }
    }

    private void welcomeUser() {
        appendToUI(2, "Welcome " + userName + "!");

    }

    private void appendToUI(final int ui, final String message){
        this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                switch(ui){
                    case 1:
                        //DataTxt
                        DataTxt.setText(message);
                        break;
                    case 2:
                        //WelcomeTxt
                        WelcomeMsg.setText(message);
                        break;
                    case 3:
                        ActivityTxt.setText(message);
                        break;
                    case 4:
                        HealthWarningTxt.setText(message);
                        break;
                    default:
                        //ErrorTxt
                        ErrorTxt.setText(message);
                        break;
                }
            }
        });
    }

    private void syncDB(){
        //internet must be connected. If not, no sync will occur until internet is connected on next time interval
        if(checkInternetConnection()){
            ArrayList<AccDataSend> accList = new ArrayList<AccDataSend>();
            ArrayList<AltDataSend> altList = new ArrayList<AltDataSend>();
            ArrayList<AmbDataSend> ambList = new ArrayList<AmbDataSend>();
            ArrayList<BarDataSend> barList = new ArrayList<BarDataSend>();
            ArrayList<CalDataSend> calList = new ArrayList<CalDataSend>();
            ArrayList<ContDataSend> contList = new ArrayList<ContDataSend>();
            ArrayList<DistDataSend> distList = new ArrayList<DistDataSend>();
            ArrayList<GSRDataSend> gsrList = new ArrayList<GSRDataSend>();
            ArrayList<GyrDataSend> gyrList = new ArrayList<GyrDataSend>();
            ArrayList<HRDataSend> hrList = new ArrayList<HRDataSend>();
            ArrayList<PedDataSend> pedList = new ArrayList<PedDataSend>();
            ArrayList<RRDataSend> rrList = new ArrayList<RRDataSend>();
            ArrayList<SkinTempDataSend> skinTempList = new ArrayList<SkinTempDataSend>();
            ArrayList<UVDataSend> uvList = new ArrayList<UVDataSend>();


            Cursor acc_cursor = myDb.getAccData();
            Cursor alt_cursor = myDb.getAltData();
            Cursor amb_cursor = myDb.getAmbData();
            Cursor bar_cursor = myDb.getBarData();
            Cursor cal_cursor = myDb.getCalData();
            Cursor cont_cursor = myDb.getContData();
            Cursor dist_cursor = myDb.getDistData();
            Cursor gsr_cursor = myDb.getGsrData();
            Cursor gyr_cursor = myDb.getGyrData();
            Cursor hr_cursor = myDb.getHrData();
            Cursor ped_cursor = myDb.getPedData();
            Cursor rr_cursor = myDb.getRrData();
            Cursor skinTemp_cursor = myDb.getSkinTempData();
            Cursor uv_cursor = myDb.getUvData();

            boolean acc_empty = false;
            boolean alt_empty = false;
            boolean amb_empty = false;
            boolean bar_empty = false;
            boolean cal_empty = false;
            boolean cont_empty = false;
            boolean dist_empty = false;
            boolean gsr_empty = false;
            boolean gyr_empty = false;
            boolean hr_empty = false;
            boolean ped_empty = false;
            boolean rr_empty = false;
            boolean skinTemp_empty = false;
            boolean uv_empty = false;


                acc_cursor.moveToFirst();
                if(acc_cursor.getCount() == 0){
                    acc_empty = true;
                }else{
                    while(!acc_cursor.isAfterLast()){
                        AccDataSend accDataSend = new AccDataSend();
                        accDataSend.userId = acc_cursor.getInt(acc_cursor.getColumnIndex("USER_ID"));
                        accDataSend.x = acc_cursor.getFloat(acc_cursor.getColumnIndex("X"));
                        accDataSend.y = acc_cursor.getFloat(acc_cursor.getColumnIndex("Y"));
                        accDataSend.z = acc_cursor.getFloat(acc_cursor.getColumnIndex("Z"));
                        accDataSend.ts = acc_cursor.getLong(acc_cursor.getColumnIndex("TS"));

                        accList.add(accDataSend);
                        acc_cursor.moveToNext();
                    }
                }

                alt_cursor.moveToFirst();
                if(alt_cursor.getCount() == 0){
                    alt_empty = true;
                }else{
                    while (!alt_cursor.isAfterLast()){
                        AltDataSend altDataSend = new AltDataSend();
                        altDataSend.userId = alt_cursor.getInt(alt_cursor.getColumnIndex("USER_ID"));
                        altDataSend.flightsAscended = alt_cursor.getLong(alt_cursor.getColumnIndex("FLIGHTS_ASC"));
                        altDataSend.flightsDescended = alt_cursor.getLong(alt_cursor.getColumnIndex("FLIGHTS_DESC"));
                        altDataSend.rate = alt_cursor.getFloat(alt_cursor.getColumnIndex("RATE"));
                        altDataSend.steppingGain = alt_cursor.getLong(alt_cursor.getColumnIndex("STEP_GAIN"));
                        altDataSend.steppingLoss = alt_cursor.getLong(alt_cursor.getColumnIndex("STEP_LOSS"));
                        altDataSend.stepsAscended = alt_cursor.getLong(alt_cursor.getColumnIndex("STEPS_ASC"));
                        altDataSend.stepsDescended = alt_cursor.getLong(alt_cursor.getColumnIndex("STEPS_DESC"));
                        altDataSend.totalGain = alt_cursor.getLong(alt_cursor.getColumnIndex("TOTAL_GAIN"));
                        altDataSend.totalLoss = alt_cursor.getLong(alt_cursor.getColumnIndex("TOTAL_LOSS"));
                        altDataSend.ts = alt_cursor.getLong(alt_cursor.getColumnIndex("TS"));

                        altList.add(altDataSend);
                        alt_cursor.moveToNext();
                    }
                }

                amb_cursor.moveToFirst();
                if(amb_cursor.getCount() == 0){
                    amb_empty = true;
                }else{
                    while(!amb_cursor.isAfterLast()){
                        AmbDataSend ambDataSend = new AmbDataSend();
                        ambDataSend.userId = amb_cursor.getInt(amb_cursor.getColumnIndex("USER_ID"));
                        ambDataSend.brightness = amb_cursor.getInt(amb_cursor.getColumnIndex("BRIGHTNESS"));
                        ambDataSend.ts = amb_cursor.getLong(amb_cursor.getColumnIndex("TS"));

                        ambList.add(ambDataSend);
                        amb_cursor.moveToNext();
                    }
                }

                bar_cursor.moveToFirst();
                if(bar_cursor.getCount() == 0){
                    bar_empty = true;
                }else{
                    while(!bar_cursor.isAfterLast()){
                        BarDataSend barDataSend = new BarDataSend();
                        barDataSend.userId = bar_cursor.getInt(bar_cursor.getColumnIndex("USER_ID"));
                        barDataSend.airPressure = bar_cursor.getDouble(bar_cursor.getColumnIndex("AIR_PRESSURE"));
                        barDataSend.temperature_cel = bar_cursor.getDouble(bar_cursor.getColumnIndex("TEMP_CEL"));
                        barDataSend.temperature_fah = bar_cursor.getDouble(bar_cursor.getColumnIndex("TEMP_FAH"));
                        barDataSend.ts = bar_cursor.getLong(bar_cursor.getColumnIndex("TS"));

                        barList.add(barDataSend);
                        bar_cursor.moveToNext();
                    }
                }

                cal_cursor.moveToFirst();
                if(cal_cursor.getCount() == 0){
                    cal_empty = true;
                }else{
                    while(!cal_cursor.isAfterLast()){
                        CalDataSend calDataSend = new CalDataSend();
                        calDataSend.userId = cal_cursor.getInt(cal_cursor.getColumnIndex("USER_ID"));
                        calDataSend.calories = cal_cursor.getLong(cal_cursor.getColumnIndex("CALORIES"));
                        calDataSend.ts = cal_cursor.getLong(cal_cursor.getColumnIndex("TS"));

                        calList.add(calDataSend);
                        cal_cursor.moveToNext();
                    }
                }

                cont_cursor.moveToFirst();
                if(cont_cursor.getCount() == 0){
                    cont_empty = true;
                }else{
                    while (!cont_cursor.isAfterLast()){
                        ContDataSend contDataSend = new ContDataSend();
                        contDataSend.userId = cont_cursor.getInt(cont_cursor.getColumnIndex("USER_ID"));
                        contDataSend.contactStateStr = cont_cursor.getString(cont_cursor.getColumnIndex("CONTACT_STATE"));
                        contDataSend.ts = cont_cursor.getLong(cont_cursor.getColumnIndex("TS"));

                        contList.add(contDataSend);
                        cont_cursor.moveToNext();
                    }
                }

                dist_cursor.moveToFirst();
                if(dist_cursor.getCount() == 0){
                    dist_empty = true;
                }else{
                    while(!dist_cursor.isAfterLast()){
                        DistDataSend distDataSend = new DistDataSend();
                        distDataSend.userId = dist_cursor.getInt(dist_cursor.getColumnIndex("USER_ID"));
                        distDataSend.motionTypeStr = dist_cursor.getString(dist_cursor.getColumnIndex("MOTION_TYPE"));
                        distDataSend.pace = dist_cursor.getFloat(dist_cursor.getColumnIndex("PACE"));
                        distDataSend.speed = dist_cursor.getFloat(dist_cursor.getColumnIndex("SPEED"));
                        distDataSend.totalDistance = dist_cursor.getLong(dist_cursor.getColumnIndex("TOTAL_DISTANCE"));
                        distDataSend.ts = dist_cursor.getLong(dist_cursor.getColumnIndex("TS"));

                        distList.add(distDataSend);
                        dist_cursor.moveToNext();
                    }
                }

                gsr_cursor.moveToFirst();
                if(gsr_cursor.getCount() == 0){
                    gsr_empty = true;
                }else{
                    while (!gsr_cursor.isAfterLast()){
                        GSRDataSend gsrDataSend = new GSRDataSend();
                        gsrDataSend.userId = gsr_cursor.getInt(gsr_cursor.getColumnIndex("USER_ID"));
                        gsrDataSend.gsr = gsr_cursor.getInt(gsr_cursor.getColumnIndex("GSR"));
                        gsrDataSend.ts = gsr_cursor.getLong(gsr_cursor.getColumnIndex("TS"));

                        gsrList.add(gsrDataSend);
                        gsr_cursor.moveToNext();
                    }
                }

                gyr_cursor.moveToFirst();
                if(gyr_cursor.getCount() == 0){
                    gyr_empty = true;
                }else{
                    while(!gyr_cursor.isAfterLast()){
                        GyrDataSend gyrDataSend = new GyrDataSend();
                        gyrDataSend.userId = gyr_cursor.getInt(gyr_cursor.getColumnIndex("USER_ID"));
                        gyrDataSend.avx = gyr_cursor.getDouble(gyr_cursor.getColumnIndex("AVX"));
                        gyrDataSend.avy = gyr_cursor.getDouble(gyr_cursor.getColumnIndex("AVY"));
                        gyrDataSend.avz = gyr_cursor.getDouble(gyr_cursor.getColumnIndex("AVZ"));
                        gyrDataSend.ts = gyr_cursor.getLong(gyr_cursor.getColumnIndex("TS"));

                        gyrList.add(gyrDataSend);
                        gyr_cursor.moveToNext();
                    }
                }

                hr_cursor.moveToFirst();
                if(hr_cursor.getCount() == 0){
                    hr_empty = true;
                }else{
                    while(!hr_cursor.isAfterLast()){
                        HRDataSend hrDataSend = new HRDataSend();
                        hrDataSend.userId = hr_cursor.getInt(hr_cursor.getColumnIndex("USER_ID"));
                        hrDataSend.hr = hr_cursor.getInt(hr_cursor.getColumnIndex("HR"));
                        hrDataSend.quality = hr_cursor.getString(hr_cursor.getColumnIndex("QUALITY"));
                        hrDataSend.ts = hr_cursor.getLong(hr_cursor.getColumnIndex("TS"));

                        hrList.add(hrDataSend);
                        hr_cursor.moveToNext();
                    }
                }

                ped_cursor.moveToFirst();
                if(ped_cursor.getCount() == 0){
                    ped_empty = true;
                }else{
                    while (!ped_cursor.isAfterLast()){
                        PedDataSend pedDataSend = new PedDataSend();
                        pedDataSend.userId = ped_cursor.getInt(ped_cursor.getColumnIndex("USER_ID"));
                        pedDataSend.totalSteps = ped_cursor.getLong(ped_cursor.getColumnIndex("TOTAL_STEPS"));
                        pedDataSend.ts = ped_cursor.getLong(ped_cursor.getColumnIndex("TS"));

                        pedList.add(pedDataSend);
                        ped_cursor.moveToNext();
                    }
                }

                rr_cursor.moveToFirst();
                if(rr_cursor.getCount() == 0){
                    rr_empty = true;
                }else{
                    while(!rr_cursor.isAfterLast()){
                        RRDataSend rrDataSend = new RRDataSend();
                        rrDataSend.userId = rr_cursor.getInt(rr_cursor.getColumnIndex("USER_ID"));
                        rrDataSend.rr = rr_cursor.getDouble(rr_cursor.getColumnIndex("RR"));
                        rrDataSend.ts = rr_cursor.getLong(rr_cursor.getColumnIndex("TS"));

                        rrList.add(rrDataSend);
                        rr_cursor.moveToNext();
                    }
                }

                skinTemp_cursor.moveToFirst();
                if(skinTemp_cursor.getCount() == 0){
                    skinTemp_empty = true;
                }else{
                    while (!skinTemp_cursor.isAfterLast()){
                        SkinTempDataSend skinTempDataSend = new SkinTempDataSend();
                        skinTempDataSend.userId = skinTemp_cursor.getInt(skinTemp_cursor.getColumnIndex("USER_ID"));
                        skinTempDataSend.temperature_cel = skinTemp_cursor.getDouble(skinTemp_cursor.getColumnIndex("TEMP_CEL"));
                        skinTempDataSend.temperature_fah = skinTemp_cursor.getDouble(skinTemp_cursor.getColumnIndex("TEMP_FAH"));
                        skinTempDataSend.ts = skinTemp_cursor.getLong(skinTemp_cursor.getColumnIndex("TS"));

                        skinTempList.add(skinTempDataSend);
                        skinTemp_cursor.moveToNext();
                    }
                }

                uv_cursor.moveToFirst();
                if(uv_cursor.getCount() == 0){
                    uv_empty = true;
                }else{
                    while(!uv_cursor.isAfterLast()){
                        UVDataSend uvDataSend = new UVDataSend();
                        uvDataSend.userId = uv_cursor.getInt(uv_cursor.getColumnIndex("USER_ID"));
                        uvDataSend.indexLevelStr = uv_cursor.getString(uv_cursor.getColumnIndex("INDEX_LEVEL"));
                        uvDataSend.ts = uv_cursor.getLong(uv_cursor.getColumnIndex("TS"));

                        uvList.add(uvDataSend);
                        uv_cursor.moveToNext();
                    }
                }

            if(acc_empty && alt_empty && amb_empty && bar_empty && cal_empty && cont_empty && dist_empty && gsr_empty && gyr_empty && hr_empty && ped_empty && rr_empty && skinTemp_empty && uv_empty){
                appendToUI(0, "NO DATA STORED. CANNOT PERFORM ANALYSIS.");
            }else{
                Gson gson = new Gson();
                final String sendAccArray = gson.toJson(accList);
                final String sendAltArray = gson.toJson(altList);
                final String sendAmbArray = gson.toJson(ambList);
                final String sendBarArray = gson.toJson(barList);
                final String sendCalArray = gson.toJson(calList);
                final String sendContArray = gson.toJson(contList);
                final String sendDistArray = gson.toJson(distList);
                final String sendGsrArray = gson.toJson(gsrList);
                final String sendGyrArray = gson.toJson(gyrList);
                final String sendHrArray = gson.toJson(hrList);
                final String sendPedArray = gson.toJson(pedList);
                final String sendRrArray = gson.toJson(rrList);
                final String sendSkinTempArray = gson.toJson(skinTempList);
                final String sendUvArray = gson.toJson(uvList);

                final String server_url = "http://ec2-18-207-221-13.compute-1.amazonaws.com/insert.php";
                //volley
                StringRequest stringRequest = new StringRequest(Request.Method.POST, server_url,
                        new Response.Listener<String>() {
                            @Override
                            public void onResponse(String response) {
                                final String result = response;
                                if(result.equals("connection successful")){
                                    //DELETE ALL OF OUR TABLES
                                    myDb.deleteAllRows();
                                }
                                Log.d("response", result);
                            }
                        },
                        new Response.ErrorListener() {
                            @Override
                            public void onErrorResponse(VolleyError error) {
                                error.printStackTrace();
                                error.getMessage();
                            }
                        }

                )
                {
                    @Override
                    protected Map<String, String> getParams() throws AuthFailureError{
                        Map<String, String> param = new HashMap<String, String>();

                        param.put("acc_array", sendAccArray);
                        param.put("alt_array", sendAltArray);
                        param.put("amb_array", sendAmbArray);
                        param.put("bar_array", sendBarArray);
                        param.put("cal_array", sendCalArray);
                        param.put("cont_array", sendContArray);
                        param.put("dist_array", sendDistArray);
                        param.put("gsr_array", sendGsrArray);
                        param.put("gyr_array", sendGyrArray);
                        param.put("hr_array", sendHrArray);
                        param.put("ped_array", sendPedArray);
                        param.put("rr_array", sendRrArray);
                        param.put("skinTemp_array", sendSkinTempArray);
                        param.put("uv_array", sendUvArray);
                        return param;
                    }
                };

                Vconnection.getnInstance(this).addRequestQue(stringRequest);
            }

        }else{
            return;
        }
    }

    private void predictActivity(){
        float[] input = convertToFloatArray();
        float[] results = activityClassifier.predictActivityProbabilities(input);
        String activity = "Activity: ";
        String certainty = "Certainty: ";
        String displayTxt;

        //find the index of largest probabilty
        int activityIndex = 0;
        for ( int i = 1; i < results.length; i++ )
        {
            if ( results[i] > results[activityIndex] ) activityIndex = i;
        }

        switch (activityIndex){
            case 0:
                displayTxt = activity + "Standing, " + certainty + Float.toString(results[0]*100) + "%";
                appendToUI(3, displayTxt);
                break;
            case 1:
                displayTxt = activity + "Lying Down, " + certainty + Float.toString(results[1]*100) + "%";
                appendToUI(3, displayTxt);
                break;
            case 2:
                displayTxt = activity + "Walking, " + certainty + Float.toString(results[2]*100) + "%";
                appendToUI(3, displayTxt);
                break;
            case 3:
                displayTxt = activity + "Climbing Stairs, " + certainty + Float.toString(results[3]*100) + "%";
                appendToUI(3, displayTxt);
                break;
            case 4:
                displayTxt = activity + "Jogging, " + certainty + Float.toString(results[4]*100) + "%";
                appendToUI(3, displayTxt);
                break;
        }
        Log.d("Probabilities", results.toString());
    }

    private float[] convertToFloatArray(){
        //convert ArrayList<Float> to float[]
        int i = 0;
        float[] inputArray = new float[predictionData.size()];

        for(Float f : predictionData){
            inputArray[i++] = (f != null ? f : Float.NaN);
        }

        //nuke all the arraylists
        xa.clear();
        ya.clear();
        za.clear();
        xg.clear();
        yg.clear();
        zg.clear();
        predictionData.clear();

        return inputArray;
    }

    private void updateData(){
        if(mIsBound && mBoundService != null) {
            appendToUI(0, "");
            ContData contData = mBoundService.getContData();

            //band is being worn, so collect rest of data
            // if(contData.contactState == BandContactState.WORN){
            AccData accData = mBoundService.getAccData();
            AltData altData = mBoundService.getAltData();
            AmbData ambData = mBoundService.getAmbData();
            BarData barData = mBoundService.getBarData();
            CalData calData = mBoundService.getCalData();
            DistData distData = mBoundService.getDistData();
            GSRData gsrData = mBoundService.getGsrdata();
            GyrData gyrData = mBoundService.getGyrData();
            HRData hrData = mBoundService.getHrdata();
            PedData pedData = mBoundService.getPedData();
            RRData rrData = mBoundService.getRRData();
            SkinTempData skinTempData = mBoundService.getSkinTempData();
            UVData uvData = mBoundService.getUVData();

            //String text = "Skin Resistance = " + gsrData.gsrValue + " kOhms\nHeart Rate = " + hrData.hr + " beats per min.\nRR = " + rrData.rr;
            String uiText = "Heart Rate = " + hrData.hr + "beats per min.\nCalories burnt = " + calData.calories + "\nTotal Steps Taken =  " + pedData.totalSteps +
                    "\nRR = " + rrData.rr + "\nSkin Temp = " + skinTempData.temperature_fah + "deg F" + "\nSkin Resistance = " + gsrData.gsrValue + "kOhms";
            appendToUI(1, uiText);

            boolean result = myDb.insertData(userId, accData, altData, ambData, barData, calData, contData, distData, gsrData, gyrData, hrData, pedData, rrData, skinTempData, uvData);

            if(!result){
                String errorMsg = "Error inserting data";
                appendToUI(0, errorMsg);
            }

            int maxHR = 220 - age;
            int hr;
            if(hrCount % 2 == 0){
                hr = maxHR + 1;
            }else{
                hr = hrData.hr;
            }

            if(hr > maxHR){
                appendToUI(4, "Seek Medical Help. Max HR: "+maxHR+" < Current HR: "+hr);
            }else{
                appendToUI(4, "");
            }



            //reset counter
            if(COUNT == xa_array.length){
                COUNT = 0;
            }

            xa.add((float)xa_array[COUNT]);
            ya.add((float)ya_array[COUNT]);
            za.add((float)za_array[COUNT]);
            xg.add((float)xg_array[COUNT]);
            yg.add((float)yg_array[COUNT]);
            zg.add((float)zg_array[COUNT]);
            COUNT++;

            if(xa.size() == N_SAMPLES && ya.size() == N_SAMPLES && za.size() == N_SAMPLES
            && xg.size() == N_SAMPLES && yg.size() == N_SAMPLES && zg.size() == N_SAMPLES){
                predictionData.addAll(xa);
                predictionData.addAll(ya);
                predictionData.addAll(za);
                predictionData.addAll(xg);
                predictionData.addAll(yg);
                predictionData.addAll(zg);

                predictActivity();

            }
        }else if(mBoundService == null){
            appendToUI(0, "Connection to Service is being Established. Please wait.");
        }else{
            appendToUI(0, "No Internet Connection. Data will not be saved.");
        }
    }

    private boolean checkInternetConnection(){
        //check for internet connection
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = cm.getActiveNetworkInfo();

        if(networkInfo != null && networkInfo.isConnected()){
            //connected to internet
            return true;
        }else{
            //no internet connection
            return false;
        }

    }

    private void startDataCollection(){
        //disable start btn, enable stop and update btn
        StopBtn.setEnabled(true);
        //UpdateBtn.setEnabled(true);
        StartBtn.setEnabled(false);

        doBindService();
        updateData();
/*        HourPicker.setValue(0);
        MinPicker.setValue(0);
        SecPicker.setValue(1);*/
        timer_toggle(0, 1000); //default to 1 second
        timer_toggle(1, 300000); //dbs sync every five minutes (if online)
    }

    private void stopDataCollection(){
        appendToUI(0, "Data Collection has been STOPPED.");

        //stop timer used to update data every five min
        timer_toggle(2, 0);

        //disable stop and update btn, enable start btn
        StopBtn.setEnabled(false);
        StartBtn.setEnabled(true);
        //UpdateBtn.setEnabled(false);

        doUnbindService();
    }

    private boolean getConnectedBandClient() throws InterruptedException, BandException {
        if (client == null) {
            BandInfo[] devices = BandClientManager.getInstance().getPairedBands();
            if (devices.length == 0) {
                appendToUI(3, "Band isn't paired with your phone.\n");
                return false;
            }
            client = BandClientManager.getInstance().create(getBaseContext(), devices[0]);
        } else if (ConnectionState.CONNECTED == client.getConnectionState()) {
            return true;
        }

        System.out.println("Band is connecting...\n");
        return ConnectionState.CONNECTED == client.connect().await();
    }

    private class HeartRateConsentTask extends AsyncTask<WeakReference<Activity>, Void, Void> {
        protected Void doInBackground(WeakReference<Activity>... params) {
            try {
                if (getConnectedBandClient()) {
                    if (params[0].get() != null) {
                        client.getSensorManager().requestHeartRateConsent(params[0].get(), new HeartRateConsentListener() {
                            @Override
                            public void userAccepted(boolean consentGiven) {
                                if(consentGiven){
                                    startDataCollection();
                                }
                            }
                        });
                    }
                } else {
                    //band still not connected, even after reconnection attempt. Throw error
                    appendToUI(3, "Band not connected.\n " +
                            "Please ensure Band is connected to your device.");
                }
            } catch (Exception e) {
                appendToUI(3, e.getMessage());
            }

            return null;
        }
    }
}




